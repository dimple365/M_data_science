# -*- coding: utf-8 -*-
"""day3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPgjM9TYryWOyFvQYj2U5LDsa6kTGt7f
"""

# Exception handling


age = '23'

try:
  # print(1/0)
  print(vari)
  if age >= 18:
    print('can vote')
  else:
    print('can\'t vote')
except TypeError:
  print('Something went wrong!!')
  print('Invalid datatype comparison!!')

except:
  print('Invalid Code!!')

def student_records(**kwargs):
  import pandas as pd
  try:
    data = pd.DataFrame(kwargs)
    return data
  except:
    data = pd.DataFrame(kwargs,index = [1])
    return data

student_records(Name = 'Ajay',Age = 12,Address = 'Noida')

student_records(Name = ['Aman','Karan','Mohan'],
                Age = [23,34,45],
                Address = ['Noida','Delhi','Noida'],
                Sec = list('ABC'))

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear = True)
  except:
    print('Timer has been Stopped!!')

show_time()

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

check_palindrome('wow')

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'
check_prime(19)

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

print_star(n=8,typ='mid',shape='*')

def sum_of_n_natural_numbers(n):
    result = 0
    for i in range(1,n+1):
        result += i
    return result

def factorial(n):
    result = 1
    for i in range(1,n+1):
        result *= i
    return result

sum_of_n_natural_numbers(11)
factorial(9)

def total_sales(*args):
  #unpacking
  result = 0
  for i in args:
    result += i
  return result

total_sales(11,12)

def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

minn(7,8)

def sound_box(paisa,platform = 'Paytm'):
    from gtts import gTTS
    text  = f'''{platform} par {paisa} rs Prapt hue.'''
    audio = gTTS(text)
    audio.save('paytm.mp3')

    import pygame as p
    p.init()

    music = p.mixer.Sound('paytm.mp3')
    music.play()

import dimple as d
print('done')

import dimple as d #ctrl+space
d.print_star(n=8,type='center',shape='$')

d.give_fibo(4)

d.show_time()

d.factorial(7)

d.check_prime(39)

from dimple import student_record
print('done')

student_record(name='kirti',age=20)

d.sum_of_n_natural_numbers(90)

import turtle
print('done')

import turtle
for i in range(4):
  turtle.speed()
  turtle.bgcolor('black')
  col=['blue','orange','green','pink']
  import random
  picked_color=randon.choice(col)
  turtle.color(picked_color)
  turtle.circle(100)
  turtle.left(90)

#context manager
file=open('dimple.py',mode='r')
print(file.read())
file.close()

f=open('dimple.py',mode='r')
print(f.readline())
file.close

f=open('dimple.py',mode='r')
for i in range(5):
  if i==4:
   print(f.readline())
  else:
    f.readline()

f=open('dimple.py',mode='r')
data=f.readlines()
print(data[5:40])
for i in data[:16]:
  print(i)